As a general rule, don't use a fold if you can compose some library functions, 
but otherwise try to use a fold in preference to a hand-rolled a 
tail recursive loop.

-- General
compare x y: compares x and y and returns an ordering (works on any Orderable)
id:   returns what it is passed (id 3 == 3)
flip: takes a function and args, and flips the args.
      take 3 [1..] == flip take [1..] 3
seq:  is an odd tool that forces non-lazy evaluation
      used like test x y = x `seq` f y
      or strictList (x:xs) = x `seq` x : strictList xs

-- Numeric
mod and div are used in integer division
odd and even are useful tests (although simple to implement)
max arg1 arg2 / min arg1 arg2  (returns the greater/lesser value)
pi: pi is definied in Prelude
exp num: return e^num.  -- let e = exp 1 is handy in interactive
sqrt / gcd / lcm: are built in functions
log is base e.  logBase is used for other bases (ie logBase 2 1024 == 10)
abs, sin, cos, tan, asin, acos, atan, sinh, cosh, tanh, asinh  -- all work
negate returns the negative of a value
ceiling, floor, round, truncate  -- work as expected

-- Important Odd List Operators (functional tools and such)
map f xs:    applies f to each x in the list xs and returns a result list
               map toUpper "doggy" returns "DOGGY"
filter f xs: applies f to each x in the list xs and returns a list of
             results for which f x returns True
               filter odd [1..10] returns [1,3,5,7,9]
foldl f acc xs: basically is (((acc `f` elt1) `f` ...) `f` last)
foldr f acc xs: works from the right (((acc `f` last) `f` ...) `f` head)
    both folds return a single value; not a list
foldl' is a strict foldl, and better for most purposes (avoids thunking)
    foldl can fill up memory for large operations and add unnecessary 
    overhead to small ones.  foldl' is in Data.List
    Thunking is generally good, but "For something cheap like arithmetic, 
    thunking an expresion is more computationally expensive than evaluating 
    it immediately." foldl (unlike foldr and foldl') implements tail recursion,
    so is a better choice for complicated (and lazy) ideas (not simple arithmetic)
        foldl (+) 0 [1..1000000000] crashed my laptop (memory)
        foldr (+) 0 [1..1000000000] causes a stack overflow
        foldl' (+) 0 [1..1000000000] returns 500000000500000000
            Note: sum also has issues with such large lists
            Note: I knew there are easier ways to find that sum
"The one-line summary for folds: if the binary operation is strict use foldl', 
 otherwise use foldr." (Use foldr to make lists, foldl' for most else).

-- Lists (list functions work on Strings)
length: length [1,2,3] returns 3
null:  returns True if lists is empty, False otherwise
head, tail: (and init, last) return head, rest or rest, last of a list
      head/tail/init/last throw exceptions on empty lists
      CATCH: test will null, not length.  
             null is guaranteed constant time; length walks the whole list
reverse: reverses a list.  head list == last (reverse list)
(:):   : (cons) is used to add an element to the head of a list (efficient!)
(++):  is used to combine two lists
elem:  checks for membership in a list, like 'a' `elem` "potato" --True
       ALSO: notElem: checks for non-membership in a list.
take:  take 3 [...] returns the first three elts of the list
       if you try to take more than what is there, you get them all
drop:  drop 3 [...] returns all but the first three elts of the list
       if you try to drop more than what is there, you get an empty list []
filter takes a predicate, and returns every list element of the list
       for which the predicate is True.  filter (<3) [1..10] == [1,2]
       (unlike takeWhile / dropWhile, filter searches the entire list)
takeWhile / dropWhile: take / drop while an expression is True
splitAt: splits a list into a 2-tuple at a given index (like a (take, drop))
         splitAt 3 [1..10] == (take 3 [1..10], drop 3 [1..10])
span:  splits a list into a 2-tuple where a test becomes False
       span even [2,4,6,7,8,9,10] returns ([2,4,6],[7,8,9,10])
break: splits a list into a 2-tuple when a test becomes True
       break odd [2,4,6,7,8,9,10] returns ([2,4,6],[7,8,9,10])
sum:  sums a numeric list.
maximum / minimum: return maximum or minimum of a list of values
and / or:  generalize && / || across a list.
           and [True, False, True] == True && False && True == False
           or  [True, False, True] == True || False || True == True
any / all: map a test function over a list and return if it is True
           for 'any' or 'all' respectively.
                all (<3) [1..10] -- False
                any (<3) [1..10] -- True
           NOTE: something is "true for all" if a list is empty
                 however it is "false for any" of an empty list
repeat 3: returns an infinite list of 3's
repeat 3 5: returns a list of 3 5's.
concat: flattens a list by one level.  
        concat [[1,2,3],[4,5,6]] returns [1,2,3,4,5,6]
        list components have common nesting level, useful for lists of strings
zip:   takes two lists and returns a list of tuples of corresponding elements
       zip [1..] ["one","two","three"] returns [(1,"one"),(2,"two"),(3"three")]
       NOTE: results can only be as long as shortest list in zip operations
unzip: returns a tuple of the two original lists from a zip
       unzip [(1,"one"),(2,"two")] == 
             (map fst [(1,"one"),(2,"two")], map snd [(1,"one"),(2,"two")])
zipWith takes a function and two lists and returns a list with results of
        applying the function each of the paired list items.
        zipWith (+) [1,2,3,4,5] [1,2,3] returns [2,4,6]
NOTE: zip3, unzip3, zipWith3 are also standard in Prelude
NOTE: zip4, unzip4, zipWith4 through zip7, unzip7, zipWith7 are in Data.List

-- Strings (which are lists of Char)
lines:   lines "my\nname\nis" returns ["my","name","is"]
unlines: unline ["my","name","is"] returns "my\nname\nis"
words:   breaks a string into a list of words
unwords: joines a list of strings with single spaces

-- Pairs (2-tupes)
fst - returns first member
snd - returns second member

-- in Data.List
isPrefixOf, isSuffixOf, isInfixOf   -- membership tests

-- in Data.Char
isUpper, toUpper, isLower, toLower
chr / ord:   map ascii value to Char and vice-versa

-- in Data.Ratio
x % y makes a proper reduced fraction out of x / y
numerator / denominator work on fractions
